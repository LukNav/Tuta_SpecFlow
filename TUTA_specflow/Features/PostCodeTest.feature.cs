// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TUTA_specflow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PostCodeTest")]
    public partial class PostCodeTestFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PostCodeTest.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PostCodeTest", "\tAs a UK citizen\r\n\tI want a postcode lookup\r\n\tBecause I want to find out more inf" +
                    "ormation about it", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
#line 7
 testRunner.Given("I am using the base url \'http://api.postcodes.io/postcodes/\' value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As a Service I validate values in API Response")]
        [NUnit.Framework.TestCaseAttribute("LS3 1EP", "200", "England", "429320", "433751", "E08000035", "nhs_ha", "Yorkshire and the Humber", null)]
        [NUnit.Framework.TestCaseAttribute("WA2 9QU", "200", "England", "360639", "390679", "E06000007", "nhs_ha", "North West", null)]
        [NUnit.Framework.TestCaseAttribute("BT30 8HE", "200", "Northern Ireland", "346246", "341931", "N09000010", "nhs_ha", "Health & Social Care Board", null)]
        [NUnit.Framework.TestCaseAttribute("SE7 7NR", "200", "England", "540987", "178168", "E09000011", "nhs_ha", "London", null)]
        [NUnit.Framework.TestCaseAttribute("SY3 9DX", "200", "England", "347535", "310803", "E06000051", "nhs_ha", "West Midlands", null)]
        [NUnit.Framework.TestCaseAttribute("---", "---", "---", "---", "---", "---", "---", "---", null)]
        [NUnit.Framework.TestCaseAttribute("LT-0000", "404", "", "", "", "", "nhs_ha", "", null)]
        [NUnit.Framework.TestCaseAttribute("GMFV+7H", "404", "Ireland", "", "", "", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("LS3 1EP", "200", "England", "429320", "433751", "E08000035", "lsoa", "Leeds 063B", null)]
        [NUnit.Framework.TestCaseAttribute("LS3 1EP", "200", "England", "429320", "433751", "E08000035", "msoa", "Leeds 063", null)]
        public virtual void AsAServiceIValidateValuesInAPIResponse(string postCode, string responseCode, string country, string eastings, string northings, string code_AdminDistrict, string responseObject, string responseObjectValue, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As a Service I validate values in API Response", null, exampleTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 10
 testRunner.Given(string.Format("I setup the request to GET using the provided \'{0}\' value", postCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
 testRunner.When("I send the request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
 testRunner.Then("I should receive a response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
 testRunner.And("I should have received a status code of \'200\' value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And(string.Format("I validate eastings should have \'{0}\' and northings should have \'{1}\' values", eastings, northings), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.And(string.Format("I validate code of district administration \'{0}\' value", code_AdminDistrict), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
    testRunner.And(string.Format("I validate Response Object  field \'{0}\' should have \'{1}\' value", responseObject, responseObjectValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
